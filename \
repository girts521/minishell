#include "libft/basic/basic.h"
#include "minishell.h"
#include <readline/readline.h>
#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

//check if node has any info about redirs
//if yes then open the dest file keeping fd.keep in mind the permissions needed
//use dup2 function to update the stdin or stdout based on the redir type
//close the fd of the dest file that was opened before
void	execute_simple_command(t_ast *node, t_env *env)
{
	char	**args;
	char	*command;
	int		builtins_check;

	builtins_check = 0;
	args = node->data.command_node.args;
	command = ft_strjoin("/bin/", node->data.command_node.value);
	builtins_check = ft_is_builtin(args[0]);
	if (builtins_check == 2 || builtins_check == 4 || builtins_check == 5 || builtins_check == 7)
	{
		free(command);
		command = NULL;
		exit(1);
	}
	if (builtins_check != 0)
		ft_select_builtin(args, env, builtins_check);
	else
	{
		execve(command, args, NULL);
		printf("do we get here? %s\n", args[1]);
	}
	free(command);
	command = NULL;
	exit(1);
}

void	execute_pipe(int pipe_fd[2], t_ast *root, t_env *env)
{
	int	left_child;
	int	favorit_child;
	int	status;
	int	piping;

	status = 0;
	piping = 0;
	if (pipe(pipe_fd) == -1)
	{
		perror("Error creating pipe!\n");
		exit(1);
	}
	left_child = fork();
	if (left_child == 0)
	{
		close(pipe_fd[0]);
		dup2(pipe_fd[1], 1);
		close(pipe_fd[1]);
		if (root->left->type == PIPE_NODE)
		{
			piping = 1;
			execute_ast(root->left, env, piping);
		}
		else
			execute_simple_command(root->left, env);
	}
	// if (left_child > 0)
	// {
	// 	printf("we starting waiting: lefty\n");
	// 	waitpid(left_child, &status, 0);
	// 	printf("we done waiting: lefty\n");
	// }
	favorit_child = fork();
	if (favorit_child == 0)
	{
		close(pipe_fd[1]);
		dup2(pipe_fd[0], 0);
		close(pipe_fd[0]);
		if (root->right->type == PIPE_NODE)
		{
			piping = 1;
			execute_ast(root->right, env, piping);
		}
		else
			execute_simple_command(root->right, env);
	}
	if (favorit_child > 0)
	{
		printf("we starting waiting: favorit\n");
		waitpid(favorit_child, &status, 0);
		printf("we done waiting: favorit\n");
	}
}

void	execute_ast(t_ast *root, t_env *env, int piping)
{
	int		child;
	int		status;
	int		pipe_fd[2];
	char	**args;
	int		builtin_code;

	if (!root)
		return ;
	if (root->type == PIPE_NODE)
		execute_pipe(pipe_fd, root, env);
	else if (root->type == COMMAND_NODE)
	{
		args = root->data.command_node.args;
		builtin_code = ft_is_builtin(args[0]);
		if (builtin_code == 2 || builtin_code == 4 || builtin_code == 5 || builtin_code == 7)
		{
			ft_select_builtin(args, env, builtin_code);
			return ;
		}
		child = fork();
		if (child == 0)
			execute_simple_command(root, env);
		else if (child > 0)
			waitpid(child, &status, 0);
		else
			perror("Error forking a child!\n");
		rl_on_new_line();
	}
	if (piping)
		exit(0);
}
